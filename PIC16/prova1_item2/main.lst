CCS PCM C Compiler, Version 4.104, 5967               10-out-23 18:34

               Filename: C:\Users\mateu\Desktop\2023-2\Microcontroladores\PCW\prova1_item2\main.lst

               ROM used: 1058 words (13%)
                         Largest free fragment is 2048
               RAM used: 10 (3%) at main() level
                         28 (8%) worst case
               Stack:    4 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   379
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT //No Power Up Timer 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES BROWNOUT //Reset when brownout detected 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #use delay(clock=20000000) 
*
0012:  MOVLW  28
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   025
0018:  MOVLW  06
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  7B
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 00,F
0024:  GOTO   018
0025:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,STREAM=Wireless) 
.................... #ifndef lcd_enable 
....................  #define lcd_enable pin_E1 // pino enable do LCD 
....................  #define lcd_rs pin_E2 // pino rs do LCD 
....................  //#define lcd_rw pin_e2 // pino rw do LCD 
....................  #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................  #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................  #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................  #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
.................... #include "C:\Users\mateu\Desktop\2023-2\Microcontroladores\PICC\Drivers\mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
0026:  BTFSC  2F.0
0027:  GOTO   02A
0028:  BCF    08.4
0029:  GOTO   02B
002A:  BSF    08.4
002B:  BSF    03.5
002C:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
002D:  BCF    03.5
002E:  BTFSC  2F.1
002F:  GOTO   032
0030:  BCF    08.5
0031:  GOTO   033
0032:  BSF    08.5
0033:  BSF    03.5
0034:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
0035:  BCF    03.5
0036:  BTFSC  2F.2
0037:  GOTO   03A
0038:  BCF    08.6
0039:  GOTO   03B
003A:  BSF    08.6
003B:  BSF    03.5
003C:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
003D:  BCF    03.5
003E:  BTFSC  2F.3
003F:  GOTO   042
0040:  BCF    08.7
0041:  GOTO   043
0042:  BSF    08.7
0043:  BSF    03.5
0044:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
0045:  BCF    09.1
0046:  BCF    03.5
0047:  BSF    09.1
.................... 	output_low(lcd_enable); 
0048:  BSF    03.5
0049:  BCF    09.1
004A:  BCF    03.5
004B:  BCF    09.1
.................... } 
004C:  RETURN
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
004D:  BSF    03.5
004E:  BCF    09.2
004F:  BCF    03.5
0050:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
0051:  MOVF   2C,F
0052:  BTFSS  03.2
0053:  GOTO   056
0054:  BCF    09.2
0055:  GOTO   057
0056:  BSF    09.2
0057:  BSF    03.5
0058:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
0059:  MOVLW  A6
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
005E:  BCF    09.1
005F:  BCF    03.5
0060:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
0061:  SWAPF  2D,W
0062:  MOVWF  2E
0063:  MOVLW  0F
0064:  ANDWF  2E,F
0065:  MOVF   2E,W
0066:  MOVWF  2F
0067:  CALL   026
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0068:  MOVF   2D,W
0069:  ANDLW  0F
006A:  MOVWF  2E
006B:  MOVWF  2F
006C:  CALL   026
.................... } 
006D:  RETURN
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
006E:  BSF    03.5
006F:  BCF    08.4
0070:  BCF    03.5
0071:  BCF    08.4
.................... 	output_low(lcd_d5); 
0072:  BSF    03.5
0073:  BCF    08.5
0074:  BCF    03.5
0075:  BCF    08.5
.................... 	output_low(lcd_d6); 
0076:  BSF    03.5
0077:  BCF    08.6
0078:  BCF    03.5
0079:  BCF    08.6
.................... 	output_low(lcd_d7); 
007A:  BSF    03.5
007B:  BCF    08.7
007C:  BCF    03.5
007D:  BCF    08.7
.................... 	output_low(lcd_rs); 
007E:  BSF    03.5
007F:  BCF    09.2
0080:  BCF    03.5
0081:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
0082:  BSF    03.5
0083:  BCF    09.1
0084:  BCF    03.5
0085:  BCF    09.1
.................... 	delay_ms(15); 
0086:  MOVLW  0F
0087:  MOVWF  28
0088:  CALL   012
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
0089:  MOVLW  01
008A:  MOVWF  23
008B:  MOVF   23,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
008F:  MOVLW  03
0090:  MOVWF  2F
0091:  CALL   026
.................... 		delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  28
0094:  CALL   012
.................... 	} 
0095:  INCF   23,F
0096:  GOTO   08B
.................... 	lcd_envia_nibble(2); 
0097:  MOVLW  02
0098:  MOVWF  2F
0099:  CALL   026
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
009A:  CLRF   23
009B:  MOVF   23,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A8
009F:  MOVF   23,W
00A0:  CALL   004
00A1:  MOVWF  24
00A2:  CLRF   2C
00A3:  MOVF   24,W
00A4:  MOVWF  2D
00A5:  CALL   04D
00A6:  INCF   23,F
00A7:  GOTO   09B
.................... } 
00A8:  BCF    0A.3
00A9:  BCF    0A.4
00AA:  GOTO   3D0 (RETURN)
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
02BF:  DECFSZ 29,W
02C0:  GOTO   2C2
02C1:  GOTO   2C5
....................    	endereco = lcd_seg_lin; 
02C2:  MOVLW  40
02C3:  MOVWF  2A
....................    else 
02C4:  GOTO   2C6
....................    	endereco = 0; 
02C5:  CLRF   2A
....................    endereco += x-1; 
02C6:  MOVLW  01
02C7:  SUBWF  28,W
02C8:  ADDWF  2A,F
....................    lcd_envia_byte(0,0x80|endereco); 
02C9:  MOVF   2A,W
02CA:  IORLW  80
02CB:  MOVWF  2B
02CC:  CLRF   2C
02CD:  MOVF   2B,W
02CE:  MOVWF  2D
02CF:  CALL   04D
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
.................... 	{ 
*
02A5:  MOVF   27,W
02A6:  XORLW  0C
02A7:  BTFSC  03.2
02A8:  GOTO   2B3
02A9:  XORLW  06
02AA:  BTFSC  03.2
02AB:  GOTO   2BB
02AC:  XORLW  07
02AD:  BTFSC  03.2
02AE:  GOTO   2BB
02AF:  XORLW  05
02B0:  BTFSC  03.2
02B1:  GOTO   2D1
02B2:  GOTO   2D6
....................      case '\f' 	:	lcd_envia_byte(0,1); 
02B3:  CLRF   2C
02B4:  MOVLW  01
02B5:  MOVWF  2D
02B6:  CALL   04D
.................... 	  			delay_ms(2); 
02B7:  MOVLW  02
02B8:  MOVWF  28
02B9:  CALL   012
.................... 				break; 
02BA:  GOTO   2DC
....................      case '\n'	: 
.................... 	  case '\r' 	:	lcd_pos_xy(1,2); 
02BB:  MOVLW  01
02BC:  MOVWF  28
02BD:  MOVLW  02
02BE:  MOVWF  29
.................... 	  			break; 
*
02D0:  GOTO   2DC
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
02D1:  CLRF   2C
02D2:  MOVLW  10
02D3:  MOVWF  2D
02D4:  CALL   04D
.................... 	  			break; 
02D5:  GOTO   2DC
....................      default	:	lcd_envia_byte(1,c); 
02D6:  MOVLW  01
02D7:  MOVWF  2C
02D8:  MOVF   27,W
02D9:  MOVWF  2D
02DA:  CALL   04D
.................... 	  			break; 
02DB:  GOTO   2DC
....................    } 
.................... } 
02DC:  RETURN
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0379:  CLRF   04
037A:  BCF    03.7
037B:  MOVLW  1F
037C:  ANDWF  03,F
037D:  MOVLW  81
037E:  BSF    03.5
037F:  MOVWF  19
0380:  MOVLW  A6
0381:  MOVWF  18
0382:  MOVLW  90
0383:  BCF    03.5
0384:  MOVWF  18
0385:  BSF    03.5
0386:  BSF    1F.0
0387:  BSF    1F.1
0388:  BSF    1F.2
0389:  BCF    1F.3
038A:  MOVLW  07
038B:  MOVWF  1C
....................  
....................    setup_adc_ports(AN0_AN1_AN3); 
*
038F:  BSF    03.5
0390:  BCF    1F.0
0391:  BCF    1F.1
0392:  BSF    1F.2
0393:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0394:  BCF    1F.6
0395:  BCF    03.5
0396:  BCF    1F.6
0397:  BCF    1F.7
0398:  BSF    03.5
0399:  BCF    1F.7
039A:  BCF    03.5
039B:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
039C:  BSF    03.5
039D:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
039E:  BCF    03.5
039F:  BCF    14.5
03A0:  BCF    20.5
03A1:  MOVF   20,W
03A2:  BSF    03.5
03A3:  MOVWF  07
03A4:  BCF    03.5
03A5:  BSF    20.4
03A6:  MOVF   20,W
03A7:  BSF    03.5
03A8:  MOVWF  07
03A9:  BCF    03.5
03AA:  BCF    20.3
03AB:  MOVF   20,W
03AC:  BSF    03.5
03AD:  MOVWF  07
03AE:  MOVLW  01
03AF:  BCF    03.5
03B0:  MOVWF  14
03B1:  MOVLW  00
03B2:  BSF    03.5
03B3:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
03B4:  MOVF   01,W
03B5:  ANDLW  C7
03B6:  IORLW  08
03B7:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
03B8:  BCF    03.5
03B9:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
03BA:  MOVLW  00
03BB:  MOVWF  78
03BC:  MOVWF  12
03BD:  MOVLW  00
03BE:  BSF    03.5
03BF:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
03C0:  MOVLW  07
03C1:  MOVWF  1C
03C2:  MOVF   05,W
03C3:  MOVWF  05
03C4:  MOVLW  10
03C5:  MOVWF  77
03C6:  DECFSZ 77,F
03C7:  GOTO   3C6
03C8:  NOP
03C9:  MOVF   1C,W
03CA:  BCF    03.5
03CB:  BCF    0D.6
....................    setup_vref(FALSE); 
03CC:  BSF    03.5
03CD:  CLRF   1D
....................  
....................    lcd_ini(); 
03CE:  BCF    03.5
03CF:  GOTO   06E
....................       delay_ms(50); 
03D0:  MOVLW  32
03D1:  MOVWF  28
03D2:  CALL   012
....................    // TODO: USER CODE!! 
....................    while(true){ 
....................     
....................       int8 leitura = read_adc(); 
03D3:  BSF    1F.2
03D4:  BTFSC  1F.2
03D5:  GOTO   3D4
03D6:  MOVF   1E,W
03D7:  MOVWF  21
....................       leitura -=23; // menos valor inicial de voltagem 
03D8:  MOVLW  17
03D9:  SUBWF  21,F
....................       int8 valor_lux = leitura*2.387559+1; 
03DA:  CLRF   24
03DB:  MOVF   21,W
03DC:  MOVWF  23
03DD:  GOTO   0AB
03DE:  MOVF   7A,W
03DF:  MOVWF  26
03E0:  MOVF   79,W
03E1:  MOVWF  25
03E2:  MOVF   78,W
03E3:  MOVWF  24
03E4:  MOVF   77,W
03E5:  MOVWF  23
03E6:  MOVLW  C4
03E7:  MOVWF  2A
03E8:  MOVLW  CD
03E9:  MOVWF  29
03EA:  MOVLW  18
03EB:  MOVWF  28
03EC:  MOVLW  80
03ED:  MOVWF  27
03EE:  GOTO   0CA
*
040F:  MOVF   78,W
0410:  MOVWF  22
....................       printf (lcd_escreve," Valor = %u",valor_lux); 
0411:  MOVLW  0C
0412:  BSF    03.6
0413:  MOVWF  0D
0414:  MOVLW  00
0415:  MOVWF  0F
0416:  BCF    03.0
0417:  MOVLW  09
0418:  BCF    03.6
0419:  MOVWF  23
041A:  GOTO   2DD
041B:  MOVF   22,W
041C:  MOVWF  23
041D:  MOVLW  1B
041E:  MOVWF  24
041F:  GOTO   342
....................    } 
0420:  GOTO   3D3
.................... } 
0421:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
